{"config":{"people":[{"name":"Dominique Saint-Pierre","idul":"dosap6","matricule":"111134516"},{"name":"Adam Kitoko","idul":"adkim1","matricule":"536868700"},{"name":"Pengdwind√© Alex Auguste Ouedraogo","idul":"paoue99","matricule":"111250058"}],"team_number":"20"},"tp_object":{"q3":{"client_file":"IiIiXApHTE8tMjAwMCBUcmF2YWlsIHByYXRpcXVlIDQgLSBDbGllbnQKTm9tcyBldCBudW3DqXJvcyDDqXR1ZGlhbnRzOgotIERvbWluaXF1ZSBTYWludC1QaWVycmUgMTExIDEzNCA1MTYKLSBBZGFtIEtpdG9rbyA1MzYgODY4IDcwMAotIFBlbmdkd2luZMOpIEFsZXggQXVndXN0ZSBPdWVkcmFvZ28gMTExIDI1MCAwNTgKIiIiCgppbXBvcnQgYXJncGFyc2UKaW1wb3J0IGdldHBhc3MKaW1wb3J0IGpzb24KaW1wb3J0IHNvY2tldAppbXBvcnQgc3lzCmltcG9ydCByZQoKaW1wb3J0IGdsb3NvY2tldAppbXBvcnQgZ2xvdXRpbHMKCgpjbGFzcyBDbGllbnQ6CiAgICAiIiJDbGllbnQgcG91ciBsZSBzZXJ2ZXVyIG1haWwgQGdsbzIwMDAuY2EuIiIiCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGRlc3RpbmF0aW9uOiBzdHIpIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgUHLDqXBhcmUgZXQgY29ubmVjdGUgbGUgc29ja2V0IGR1IGNsaWVudCBgX3NvY2tldGAuCgogICAgICAgIFByw6lwYXJlIHVuIGF0dHJpYnV0IGBfdXNlcm5hbWVgIHBvdXIgc3RvY2tlciBsZSBub20gZCd1dGlsaXNhdGV1cgogICAgICAgIGNvdXJhbnQuIExhaXNzw6kgdmlkZSBxdWFuZCBsJ3V0aWxpc2F0ZXVyIG4nZXN0IHBhcyBjb25uZWN0w6kuCiAgICAgICAgIiIiCiAgICAgICAgIyBQcsOpcGFyYXRpb24gZHUgc29ja2V0CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZWxmLl9zb2NrZXQgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pCiAgICAgICAgICAgIHNlbGYuX3NvY2tldC5jb25uZWN0KChkZXN0aW5hdGlvbiwgZ2xvdXRpbHMuQVBQX1BPUlQpKQogICAgICAgIGV4Y2VwdCBnbG9zb2NrZXQuR0xPU29ja2V0RXJyb3IgYXMgZToKICAgICAgICAgICAgc3lzLmV4aXQoLTEpCiAgICAgICAgCiAgICAgICAgI1Byw6lwYXJhdGlvbiBkZXMgbWVtYnJlcwogICAgICAgIHNlbGYuX3VzZXJuYW1lID0gTm9uZQoKICAgIGRlZiBfcmVnaXN0ZXIoc2VsZikgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICBEZW1hbmRlIHVuIG5vbSBkJ3V0aWxpc2F0ZXVyIGV0IHVuIG1vdCBkZSBwYXNzZSBldCBsZXMgdHJhbnNtZXQgYXUKICAgICAgICBzZXJ2ZXVyIGF2ZWMgbCdlbnTDqnRlIGBBVVRIX1JFR0lTVEVSYC4KCiAgICAgICAgU2kgbGEgY3LDqWF0aW9uIGR1IGNvbXB0ZSBzJ2VzdCBlZmZlY3R1w6llIGF2ZWMgc3VjY8OocywgbCdhdHRyaWJ1dAogICAgICAgIGBfdXNlcm5hbWVgIGVzdCBtaXMgw6Agam91ciwgc2lub24gbCdlcnJldXIgZXN0IGFmZmljaMOpZS4KICAgICAgICAiIiIKICAgICAgICB1c2VyTm9tID0gaW5wdXQoIkVudHJleiB1biBub20gZCd1dGlsaXNhdGV1cjoiKQogICAgICAgIG1vdERlUGFzc2UgPSBnZXRwYXNzLmdldHBhc3MoIkVudHJleiB1biBtb3QgZGUgcGFzc2U6IikKICAgICAgICBtZXNzYWdlQXV0aCA9IGdsb3V0aWxzLkdsb01lc3NhZ2UoaGVhZGVyPWdsb3V0aWxzLkhlYWRlcnMuQVVUSF9SRUdJU1RFUiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZD0gZ2xvdXRpbHMuQXV0aFBheWxvYWQodXNlcm5hbWU9dXNlck5vbSwgcGFzc3dvcmQ9bW90RGVQYXNzZSkpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBnbG9zb2NrZXQuc2VuZF9tZXNnKHNlbGYuX3NvY2tldCwganNvbi5kdW1wcyhtZXNzYWdlQXV0aCkpCiAgICAgICAgZXhjZXB0IGdsb3NvY2tldC5HTE9Tb2NrZXRFcnJvcjoKICAgICAgICAgICAgcHJpbnQoIkVycmV1ciwgbGEgY29ubmV4aW9uIGF2ZWMgbGUgc2VydmV1ciBlc3Qgcm9tcHVlIToiKQogICAgICAgICAgICBzZWxmLl9xdWl0KCkKCiAgICAgICAgIyBSZWNldm9pciBsYSByw6lwb25zZSBkdSBzZXJ2ZXVyCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXBvbnNlID0ganNvbi5sb2FkcyhnbG9zb2NrZXQucmVjdl9tZXNnKHNlbGYuX3NvY2tldCkpCiAgICAgICAgZXhjZXB0IGdsb3NvY2tldC5HTE9Tb2NrZXRFcnJvcjoKICAgICAgICAgICAgcHJpbnQoIkVycmV1ciwgbGEgY29ubmV4aW9uIGF2ZWMgbGUgc2VydmV1ciBlc3Qgcm9tcHVlIToiKQogICAgICAgICAgICBzZWxmLl9xdWl0KCkKCiAgICAgICAgbWF0Y2ggcmVwb25zZToKICAgICAgICAgICAgY2FzZSB7ImhlYWRlciI6IGdsb3V0aWxzLkhlYWRlcnMuT0t9OgogICAgICAgICAgICAgICAgc2VsZi5fdXNlcm5hbWUgPSB1c2VyTm9tCiAgICAgICAgICAgIGNhc2UgeyJoZWFkZXIiOiBnbG91dGlscy5IZWFkZXJzLkVSUk9SfToKICAgICAgICAgICAgICAgIGVyclBheWxvYWQgPSByZXBvbnNlWydwYXlsb2FkJ10KICAgICAgICAgICAgICAgIHByaW50KGVyclBheWxvYWRbJ2Vycm9yX21lc3NhZ2UnXSkKCiAgICBkZWYgX2xvZ2luKHNlbGYpIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgRGVtYW5kZSB1biBub20gZCd1dGlsaXNhdGV1ciBldCB1biBtb3QgZGUgcGFzc2UgZXQgbGVzIHRyYW5zbWV0IGF1CiAgICAgICAgc2VydmV1ciBhdmVjIGwnZW50w6p0ZSBgQVVUSF9MT0dJTmAuCgogICAgICAgIFNpIGxhIGNvbm5leGlvbiBlc3QgZWZmZWN0dcOpZSBhdmVjIHN1Y2PDqHMsIGwnYXR0cmlidXQgYF91c2VybmFtZWAKICAgICAgICBlc3QgbWlzIMOgIGpvdXIsIHNpbm9uIGwnZXJyZXVyIGVzdCBhZmZpY2jDqWUuCiAgICAgICAgIiIiCgogICAgICAgIHByaW50KCJDb25uZXhpb24gw6AgdW4gY29tcHRlIGV4aXN0YW50OiIpCiAgICAgICAgbm9tRFV0aWxpc2F0ZXVyID0gaW5wdXQoIkVudHJleiB1biBub20gZCd1dGlsaXNhdGV1cjoiKQogICAgICAgIG1vdERlUGFzc2UgPSBnZXRwYXNzLmdldHBhc3MoIkVudHJleiB1biBtb3QgZGUgcGFzc2U6IikKCiAgICAgICAgIyBFbnZveWVyIGwnZW50w6p0ZSBBVVRIX0xPR0lOIGF1IHNlcnZldXIgYXZlYyBsZXMgaW5mb3JtYXRpb25zIGRlIGNvbm5leGlvbgogICAgICAgIGF1dGhMb2dNZXNzYWdlID0gZ2xvdXRpbHMuR2xvTWVzc2FnZSgKICAgICAgICAgICAgaGVhZGVyPWdsb3V0aWxzLkhlYWRlcnMuQVVUSF9MT0dJTiwKICAgICAgICAgICAgcGF5bG9hZD1nbG91dGlscy5BdXRoUGF5bG9hZCh1c2VybmFtZT1ub21EVXRpbGlzYXRldXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ9bW90RGVQYXNzZSkKICAgICAgICApCiAgICAgICAgdHJ5OgogICAgICAgICAgICBnbG9zb2NrZXQuc2VuZF9tZXNnKHNlbGYuX3NvY2tldCwganNvbi5kdW1wcyhhdXRoTG9nTWVzc2FnZSkpCiAgICAgICAgZXhjZXB0IGdsb3NvY2tldC5HTE9Tb2NrZXRFcnJvcjoKICAgICAgICAgICAgcHJpbnQoIkVycmV1ciwgbGEgY29ubmV4aW9uIGF2ZWMgbGUgc2VydmV1ciBlc3Qgcm9tcHVlIToiKQogICAgICAgICAgICBzZWxmLl9xdWl0KCkKCiAgICAgICAgIyBSZWNldm9pciBsYSByw6lwb25zZSBkdSBzZXJ2ZXVyCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXBvbnNlID0ganNvbi5sb2FkcyhnbG9zb2NrZXQucmVjdl9tZXNnKHNlbGYuX3NvY2tldCkpCiAgICAgICAgZXhjZXB0IGdsb3NvY2tldC5HTE9Tb2NrZXRFcnJvcjoKICAgICAgICAgICAgcHJpbnQoIkVycmV1ciwgbGEgY29ubmV4aW9uIGF2ZWMgbGUgc2VydmV1ciBlc3Qgcm9tcHVlIToiKQogICAgICAgICAgICBzZWxmLl9xdWl0KCkKCiAgICAgICAgbWF0Y2ggcmVwb25zZToKICAgICAgICAgICAgY2FzZSB7ImhlYWRlciI6IGdsb3V0aWxzLkhlYWRlcnMuT0t9OgogICAgICAgICAgICAgICAgc2VsZi5fdXNlcm5hbWUgPSBub21EVXRpbGlzYXRldXIKICAgICAgICAgICAgY2FzZSB7ImhlYWRlciI6IGdsb3V0aWxzLkhlYWRlcnMuRVJST1J9OgogICAgICAgICAgICAgICAgcHJpbnQocmVwb25zZVsncGF5bG9hZCddWydlcnJvcl9tZXNzYWdlJ10pCgogICAgZGVmIF9xdWl0KHNlbGYpIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgUHLDqXZpZW5zIGxlIHNlcnZldXIgZGUgbGEgZMOpY29ubmV4aW9uIGF2ZWMgbCdlbnTDqnRlIGBCWUVgIGV0IGZlcm1lIGxlCiAgICAgICAgc29ja2V0IGR1IGNsaWVudC4KICAgICAgICAiIiIKICAgICAgICAjIEVudm95ZXIgbCdlbnTDqnRlIEJZRSBhdSBzZXJ2ZXVyCiAgICAgICAgdHJ5OgogICAgICAgICAgICBnbG9zb2NrZXQuc2VuZF9tZXNnKHNlbGYuX3NvY2tldCwganNvbi5kdW1wcyhnbG91dGlscy5HbG9NZXNzYWdlKAogICAgICAgICAgICAgICAgaGVhZGVyPWdsb3V0aWxzLkhlYWRlcnMuQllFLAogICAgICAgICAgICAgICAgcGF5bG9hZD1Ob25lCiAgICAgICAgICAgICkpKQogICAgICAgIGV4Y2VwdCBnbG9zb2NrZXQuR0xPU29ja2V0RXJyb3I6CiAgICAgICAgICAgIHByaW50KCJFcnJldXIsIGRlIGNvbW11bmljYXRpb24gYXZlYyBsZSBzZXJ2ZXVyIVxuIikKICAgICAgICAgICAgc2VsZi5fc29ja2V0LmNsb3NlKCkKCiAgICAgICAgIyBGZXJtZXIgbGUgc29ja2V0IGR1IGNsaWVudAogICAgICAgIHNlbGYuX3NvY2tldC5jbG9zZSgpCgogICAgZGVmIF9yZWFkX2VtYWlsKHNlbGYpIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgRGVtYW5kZSBhdSBzZXJ2ZXVyIGxhIGxpc3RlIGRlIHNlcyBjb3VycmllbHMgYXZlYyBsJ2VudMOqdGUKICAgICAgICBgSU5CT1hfUkVBRElOR19SRVFVRVNUYC4KCiAgICAgICAgQWZmaWNoZSBsYSBsaXN0ZSBkZXMgY291cnJpZWxzIHB1aXMgdHJhbnNtZXQgbGUgY2hvaXggZGUgbCd1dGlsaXNhdGV1cgogICAgICAgIGF2ZWMgbCdlbnTDqnRlIGBJTkJPWF9SRUFESU5HX0NIT0lDRWAuCgogICAgICAgIEFmZmljaGUgbGUgY291cnJpZWwgw6AgbCdhaWRlIGR1IGdhYmFyaXQgYEVNQUlMX0RJU1BMQVlgLgoKICAgICAgICBTJ2lsIG4neSBhIHBhcyBkZSBjb3VycmllbCDDoCBsaXJlLCBsJ3V0aWxpc2F0ZXVyIGVzdCBhdmVydGkgYXZhbnQgZGUKICAgICAgICByZXRvdXJuZXIgYXUgbWVudSBwcmluY2lwYWwuCiAgICAgICAgIiIiCiAgICAgICAgIyBEZW1hbmRlciBsYSBsaXN0ZSBkZXMgY291cnJpZWxzIGF1IHNlcnZldXIKICAgICAgICBkZW1hbmRlRW1haWxMaXN0ID0gZ2xvdXRpbHMuR2xvTWVzc2FnZSgKICAgICAgICAgICAgaGVhZGVyPWdsb3V0aWxzLkhlYWRlcnMuSU5CT1hfUkVBRElOR19SRVFVRVNUCiAgICAgICAgKQogICAgICAgIHRyeToKICAgICAgICAgICAgZ2xvc29ja2V0LnNlbmRfbWVzZyhzZWxmLl9zb2NrZXQsIGpzb24uZHVtcHMoZGVtYW5kZUVtYWlsTGlzdCkpCiAgICAgICAgZXhjZXB0IGdsb3NvY2tldC5HTE9Tb2NrZXRFcnJvcjoKICAgICAgICAgICAgcHJpbnQoIkVycmV1ciwgZGUgY29tbXVuaWNhdGlvbiBhdmVjIGxlIHNlcnZldXIhXG5WZXVpbGxleiB2b3VzIHJlY29ubmVjdGVyOiIpCiAgICAgICAgICAgIHNlbGYuX2xvZ291dCgpCgogICAgICAgICMgUmVjZXZvaXIgbGEgcsOpcG9uc2UgZHUgc2VydmV1cgogICAgICAgIHRyeToKICAgICAgICAgICAgcmVwb25zZUVtYWlsTGlzdCA9IGpzb24ubG9hZHMoZ2xvc29ja2V0LnJlY3ZfbWVzZyhzZWxmLl9zb2NrZXQpKQogICAgICAgIGV4Y2VwdCBnbG9zb2NrZXQuR0xPU29ja2V0RXJyb3I6CiAgICAgICAgICAgIHByaW50KCJFcnJldXIsIGRlIGNvbW11bmljYXRpb24gYXZlYyBsZSBzZXJ2ZXVyIVxuVmV1aWxsZXogdm91cyByZWNvbm5lY3RlcjoiKQogICAgICAgICAgICBzZWxmLl9sb2dvdXQoKQoKICAgICAgICBlbWFpbExpc3Q6IGxpc3QgPSByZXBvbnNlRW1haWxMaXN0WydwYXlsb2FkJ11bJ2VtYWlsX2xpc3QnXQogICAgICAgIGlmIGxlbihlbWFpbExpc3QpIDwgMToKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZm9yIGNvdXJyaWVsIGluIGVtYWlsTGlzdDoKICAgICAgICAgICAgICAgIHByaW50KGNvdXJyaWVsKQogICAgICAgICAgICAjIERlbWFuZGVyIGxlIGNob2l4IGRlIGwndXRpbGlzYXRldXIKICAgICAgICAgICAgY2hvaXhDb3VycmllbCA9IGlucHV0KCJFbnRyZXogdm90cmUgY2hvaXggWzEtIiArIHN0cihsZW4oZW1haWxMaXN0KSkgKyAiXToiKQogICAgICAgICAgICBpZiBub3QgKChyZS5zZWFyY2gociJbMC05XSsiLCBjaG9peENvdXJyaWVsKSBpcyBub3QgTm9uZSkgYW5kIChub3QgaW50KGNob2l4Q291cnJpZWwpPmxlbihlbWFpbExpc3QpKSk6CiAgICAgICAgICAgICAgICBwcmludCgiRXJyZXVyLCBjaG9peCBkZSBjb3VycmllbCBpbnZhbGlkZSFcbiBWZXVpbGxleiByZWNvbW1lbmNlci4iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgI0Vudm9pIGR1IG51bcOpcm8gZHUgY291cnJpZWwgY2hvaXNpCiAgICAgICAgICAgICAgICBlbnZvaUNob2l4ID0gZ2xvdXRpbHMuR2xvTWVzc2FnZSgKICAgICAgICAgICAgICAgICAgICBoZWFkZXI9Z2xvdXRpbHMuSGVhZGVycy5JTkJPWF9SRUFESU5HX0NIT0lDRSwKICAgICAgICAgICAgICAgICAgICBwYXlsb2FkPWdsb3V0aWxzLkVtYWlsQ2hvaWNlUGF5bG9hZChjaG9pY2U9Y2hvaXhDb3VycmllbCkKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBnbG9zb2NrZXQuc2VuZF9tZXNnKHNlbGYuX3NvY2tldCwganNvbi5kdW1wcyhlbnZvaUNob2l4KSkKICAgICAgICAgICAgICAgIGV4Y2VwdCBnbG9zb2NrZXQuR0xPU29ja2V0RXJyb3I6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIkVycmV1ciwgZGUgY29tbXVuaWNhdGlvbiBhdmVjIGxlIHNlcnZldXIhXG5WZXVpbGxleiB2b3VzIHJlY29ubmVjdGVyOiIpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fbG9nb3V0KCkKCiAgICAgICAgICAgICAgICAjUmVjZXB0aW9uIGR1IGNvdXJyaWVsIGNob2lzaQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHJlY2VwdGlvbkVtYWlsID0ganNvbi5sb2FkcyhnbG9zb2NrZXQucmVjdl9tZXNnKHNlbGYuX3NvY2tldCkpCiAgICAgICAgICAgICAgICBleGNlcHQgZ2xvc29ja2V0LkdMT1NvY2tldEVycm9yOgogICAgICAgICAgICAgICAgICAgIHByaW50KCJFcnJldXIsIGRlIGNvbW11bmljYXRpb24gYXZlYyBsZSBzZXJ2ZXVyIVxuVmV1aWxsZXogdm91cyByZWNvbm5lY3RlcjoiKQogICAgICAgICAgICAgICAgICAgIHNlbGYuX2xvZ291dCgpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHByaW50KGdsb3V0aWxzLkVNQUlMX0RJU1BMQVkuZm9ybWF0KAogICAgICAgICAgICAgICAgICAgIHNlbmRlcj1yZWNlcHRpb25FbWFpbFsicGF5bG9hZCJdWydzZW5kZXInXSwKICAgICAgICAgICAgICAgICAgICB0bz1yZWNlcHRpb25FbWFpbFsicGF5bG9hZCJdWydkZXN0aW5hdGlvbiddLAogICAgICAgICAgICAgICAgICAgIHN1YmplY3Q9cmVjZXB0aW9uRW1haWxbInBheWxvYWQiXVsnc3ViamVjdCddLAogICAgICAgICAgICAgICAgICAgIGRhdGU9cmVjZXB0aW9uRW1haWxbInBheWxvYWQiXVsnZGF0ZSddLAogICAgICAgICAgICAgICAgICAgIGJvZHk9cmVjZXB0aW9uRW1haWxbInBheWxvYWQiXVsnY29udGVudCddKSkKCiAgICBkZWYgX3NlbmRfZW1haWwoc2VsZikgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICBEZW1hbmRlIMOgIGwndXRpbGlzYXRldXIgcmVzcGVjdGl2ZW1lbnQ6CiAgICAgICAgLSBsJ2FkcmVzc2UgZW1haWwgZHUgZGVzdGluYXRhaXJlLAogICAgICAgIC0gbGUgc3VqZXQgZHUgbWVzc2FnZSwKICAgICAgICAtIGxlIGNvcnBzIGR1IG1lc3NhZ2UuCgogICAgICAgIExhIHNhaXNpZSBkdSBjb3JwcyBzZSB0ZXJtaW5lIHBhciB1biBwb2ludCBzZXVsIHN1ciB1bmUgbGlnbmUuCgogICAgICAgIFRyYW5zbWV0IGNlcyBpbmZvcm1hdGlvbnMgYXZlYyBsJ2VudMOqdGUgYEVNQUlMX1NFTkRJTkdgLgogICAgICAgICIiIgogICAgICAgICNSw6ljdXDDqXJhdGlvbiBkdSBjb250ZW51IGR1IGNvdXJyaWVsLgogICAgICAgIGRlc3RFbWFpbCA9IGlucHV0KCJFbnRyZXogbCdhZHJlc3NlIGR1IGRlc3RpbmF0YWlyZToiKQogICAgICAgIHN1akVtYWlsID0gaW5wdXQoIkVudHJleiBsZSBzdWpldDoiKQogICAgICAgICMgQm91Y2xlIGQnZW50csOpZSBkdSBjb250ZW51IGR1IGVtYWlsLgogICAgICAgIHByaW50KCJFbnRyZXogbGUgY29udGVudSBkdSBjb3VycmllbCwgdGVybWluZXogbGEgc2Fpc2llIGF2ZWMgdW4gJy4nIHNldWwgc3VyIHVuZSBsaWduZToiKQogICAgICAgIG1lc3NhZ2VFbWFpbCA9ICIiCiAgICAgICAgc2Fpc2llVGVybSA9IEZhbHNlCiAgICAgICAgd2hpbGUgKG5vdCBzYWlzaWVUZXJtKToKICAgICAgICAgICAgdGV4dFNhaXNpID0gaW5wdXQoKQogICAgICAgICAgICBpZiAodGV4dFNhaXNpID09ICcuJyk6CiAgICAgICAgICAgICAgICBzYWlzaWVUZXJtID0gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgbWVzc2FnZUVtYWlsICs9IHRleHRTYWlzaQogICAgICAgICAgICAgICAgbWVzc2FnZUVtYWlsICs9ICdcbicKCiAgICAgICAgIyBQcsOpcGFyYXRpb24gZHUgY291cnJpZWwuCiAgICAgICAgZW1haWxDb250ZW51ID0gZ2xvdXRpbHMuRW1haWxDb250ZW50UGF5bG9hZCgKICAgICAgICAgICAgc2VuZGVyPXNlbGYuX3VzZXJuYW1lICsgJ0AnICsgZ2xvdXRpbHMuU0VSVkVSX0RPTUFJTiwKICAgICAgICAgICAgZGVzdGluYXRpb249ZGVzdEVtYWlsLAogICAgICAgICAgICBzdWJqZWN0PXN1akVtYWlsLAogICAgICAgICAgICBkYXRlPWdsb3V0aWxzLmdldF9jdXJyZW50X3V0Y190aW1lKCksCiAgICAgICAgICAgIGNvbnRlbnQ9bWVzc2FnZUVtYWlsKQogICAgICAgICNFbnZvaSBkZSBjb3VycmllbAogICAgICAgIGVtYWlsU2VudCA9IGdsb3V0aWxzLkdsb01lc3NhZ2UoCiAgICAgICAgICAgIGhlYWRlcj1nbG91dGlscy5IZWFkZXJzLkVNQUlMX1NFTkRJTkcsCiAgICAgICAgICAgIHBheWxvYWQ9ZW1haWxDb250ZW51KQogICAgICAgIHRyeToKICAgICAgICAgICAgZ2xvc29ja2V0LnNlbmRfbWVzZyhzZWxmLl9zb2NrZXQsIGpzb24uZHVtcHMoZW1haWxTZW50KSkKICAgICAgICBleGNlcHQgZ2xvc29ja2V0LkdMT1NvY2tldEVycm9yOgogICAgICAgICAgICBwcmludCgiRXJyZXVyLCBkZSBjb21tdW5pY2F0aW9uIGF2ZWMgbGUgc2VydmV1ciFcblZldWlsbGV6IHZvdXMgcmVjb25uZWN0ZXI6IikKICAgICAgICAgICAgc2VsZi5fbG9nb3V0KCkKCiAgICAgICAgIyBDb25maXJtYXRpb24gZGUgbCdlbnZvaS4KICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlcG9uc2VTZXJ2ZXVyID0ganNvbi5sb2FkcyhnbG9zb2NrZXQucmVjdl9tZXNnKHNlbGYuX3NvY2tldCkpCiAgICAgICAgZXhjZXB0IGdsb3NvY2tldC5HTE9Tb2NrZXRFcnJvcjoKICAgICAgICAgICAgcHJpbnQoIkVycmV1ciwgZGUgY29tbXVuaWNhdGlvbiBhdmVjIGxlIHNlcnZldXIhXG5WZXVpbGxleiB2b3VzIHJlY29ubmVjdGVyOiIpCiAgICAgICAgICAgIHNlbGYuX2xvZ291dCgpCiAgICAgICAgCiAgICAgICAgbWF0Y2ggcmVwb25zZVNlcnZldXI6CiAgICAgICAgICAgIGNhc2UgeyJoZWFkZXIiOiBnbG91dGlscy5IZWFkZXJzLk9LfToKICAgICAgICAgICAgICAgIHByaW50KCJDb3VycmllbCBlbnZvecOpIGF2ZWMgc3VjY8OocyIpCiAgICAgICAgICAgIGNhc2UgeyJoZWFkZXIiOiBnbG91dGlscy5IZWFkZXJzLkVSUk9SfToKICAgICAgICAgICAgICAgIHByaW50KHJlcG9uc2VTZXJ2ZXVyWydwYXlsb2FkJ11bJ2Vycm9yX21lc3NhZ2UnXSkKICAgICAgICAgICAgY2FzZSBfOgogICAgICAgICAgICAgICAgcHJpbnQoIkVycmV1ciBsb3JzIGRlIGxhIGNvbmZpcm1hdGlvbiBkZSBsJ2Vudm9pLiIpCgogICAgZGVmIF9jaGVja19zdGF0cyhzZWxmKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIERlbWFuZGUgbGVzIHN0YXRpc3RpcXVlcyBhdSBzZXJ2ZXVyIGF2ZWMgbCdlbnTDqnRlIGBTVEFUU19SRVFVRVNUYC4KCiAgICAgICAgQWZmaWNoZSBsZXMgc3RhdGlzdGlxdWVzIMOgIGwnYWlkZSBkdSBnYWJhcml0IGBTVEFUU19ESVNQTEFZYC4KICAgICAgICAiIiIKICAgICAgICAjRW52b2kgZGUgbGEgZGVtYW5kZSBkZSBzdGF0aXN0aXF1ZS4KICAgICAgICBkZW1hbmRlU3RhdHMgPSBnbG91dGlscy5HbG9NZXNzYWdlKAogICAgICAgICAgICBoZWFkZXI9Z2xvdXRpbHMuSGVhZGVycy5TVEFUU19SRVFVRVNUCiAgICAgICAgKQogICAgICAgIHRyeToKICAgICAgICAgICAgZ2xvc29ja2V0LnNlbmRfbWVzZyhzZWxmLl9zb2NrZXQsIGpzb24uZHVtcHMoZGVtYW5kZVN0YXRzKSkKICAgICAgICBleGNlcHQgZ2xvc29ja2V0LkdMT1NvY2tldEVycm9yOgogICAgICAgICAgICBwcmludCgiRXJyZXVyLCBkZSBjb21tdW5pY2F0aW9uIGF2ZWMgbGUgc2VydmV1ciFcblZldWlsbGV6IHZvdXMgcmVjb25uZWN0ZXI6IikKICAgICAgICAgICAgc2VsZi5fbG9nb3V0KCkKICAgICAgICAKICAgICAgICAjUsOpY2VwdGlvbiBkZXMgc3RhdGlzdGlxdWVzIGV0IGFmZmljaGFnZS4KICAgICAgICB0cnk6CiAgICAgICAgICAgIHN0YXRzID1qc29uLmxvYWRzKGdsb3NvY2tldC5yZWN2X21lc2coc2VsZi5fc29ja2V0KSkKICAgICAgICBleGNlcHQgZ2xvc29ja2V0LkdMT1NvY2tldEVycm9yOgogICAgICAgICAgICBwcmludCgiRXJyZXVyLCBkZSBjb21tdW5pY2F0aW9uIGF2ZWMgbGUgc2VydmV1ciFcblZldWlsbGV6IHZvdXMgcmVjb25uZWN0ZXI6IikKICAgICAgICAgICAgc2VsZi5fbG9nb3V0KCkKCiAgICAgICAgbWF0Y2ggc3RhdHM6CiAgICAgICAgICAgIGNhc2UgeyJoZWFkZXIiOiBnbG91dGlscy5IZWFkZXJzLk9LfToKICAgICAgICAgICAgICAgIGlmICdwYXlsb2FkJyBpbiBzdGF0czoKICAgICAgICAgICAgICAgICAgICBhZmZpY2hhZ2VTdGF0cyA9IGdsb3V0aWxzLlNUQVRTX0RJU1BMQVkuZm9ybWF0KAogICAgICAgICAgICAgICAgICAgICAgICBjb3VudD1zdGF0c1sicGF5bG9hZCJdWyJjb3VudCJdLAogICAgICAgICAgICAgICAgICAgICAgICBzaXplPXN0YXRzWyJwYXlsb2FkIl1bInNpemUiXSkKICAgICAgICAgICAgICAgICAgICBwcmludChhZmZpY2hhZ2VTdGF0cykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIkVycmV1ciBsb3JzIGwnYWNjw6hzIGF1eCBzdGF0aXN0aXF1ZXMuIikKICAgICAgICAgICAgY2FzZSBfOgogICAgICAgICAgICAgICAgcHJpbnQoIkVycmV1ciBsb3JzIGwnYWNjw6hzIGF1eCBzdGF0aXN0aXF1ZXMuIikKCiAgICBkZWYgX2xvZ291dChzZWxmKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIFByw6l2aWVucyBsZSBzZXJ2ZXVyIGF2ZWMgbCdlbnTDqnRlIGBBVVRIX0xPR09VVGAuCgogICAgICAgIE1ldCDDoCBqb3VyIGwnYXR0cmlidXQgYF91c2VybmFtZWAuCiAgICAgICAgIiIiCiAgICAgICAgbG9nT3V0TWVzc2FnZSA9IGdsb3V0aWxzLkdsb01lc3NhZ2UoCiAgICAgICAgICAgIGhlYWRlcj1nbG91dGlscy5IZWFkZXJzLkFVVEhfTE9HT1VUKQogICAgICAgIHRyeToKICAgICAgICAgICAgZ2xvc29ja2V0LnNlbmRfbWVzZyhzZWxmLl9zb2NrZXQsIGpzb24uZHVtcHMobG9nT3V0TWVzc2FnZSkpCiAgICAgICAgZXhjZXB0IGdsb3NvY2tldC5HTE9Tb2NrZXRFcnJvciBhcyBlOgogICAgICAgICAgICBwcmludCgiRXJyZXVyLCBsYSBjb25uZXhpb24gYXZlYyBsZSBzZXJ2ZXVyIGVzdCByb21wdWUhOiIsIGUpCiAgICAgICAgICAgIHNlbGYuX3VzZXJuYW1lID0gTm9uZQogICAgICAgICAgICBzZWxmLl9xdWl0KCkKCiAgICAgICAgc2VsZi5fdXNlcm5hbWUgPSBOb25lCgogICAgZGVmIHJ1bihzZWxmKSAtPiBOb25lOgogICAgICAgICIiIlBvaW50IGQnZW50csOpZSBkdSBjbGllbnQuIiIiCiAgICAgICAgc2hvdWxkX3F1aXQgPSBGYWxzZQoKICAgICAgICB3aGlsZSBub3Qgc2hvdWxkX3F1aXQ6CiAgICAgICAgICAgIGlmIG5vdCBzZWxmLl91c2VybmFtZToKICAgICAgICAgICAgICAgICMgQXV0aGVudGljYXRpb24gbWVudQogICAgICAgICAgICAgICAgcHJpbnQoZ2xvdXRpbHMuQ0xJRU5UX0FVVEhfQ0hPSUNFKQogICAgICAgICAgICAgICAgY2hvaXggPSBpbnB1dCgiRW50cmV6IHZvdHJlIGNob2l4IFsxLTNdOiIpCiAgICAgICAgICAgICAgICBtYXRjaCBjaG9peDoKICAgICAgICAgICAgICAgICAgICBjYXNlICIxIjoKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVnaXN0ZXIoKQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgZ2xvc29ja2V0LkdMT1NvY2tldEVycm9yIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiRXJyZXVyLCBsYSBjb25uZXhpb24gYXZlYyBsZSBzZXJ2ZXVyIGVzdCByb21wdWUhOiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9xdWl0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZF9xdWl0ID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICBjYXNlICIyIjoKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fbG9naW4oKQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgZ2xvc29ja2V0LkdMT1NvY2tldEVycm9yIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiRXJyZXVyLCBsYSBjb25uZXhpb24gYXZlYyBsZSBzZXJ2ZXVyIGVzdCByb21wdWUhOiIsIGUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9xdWl0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZF9xdWl0ID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICBjYXNlICIzIjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcXVpdCgpCiAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZF9xdWl0ID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIGNhc2UgXzogCiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgTWFpbiBtZW51CiAgICAgICAgICAgICAgICBwcmludChnbG91dGlscy5DTElFTlRfVVNFX0NIT0lDRSkKICAgICAgICAgICAgICAgIGNob2l4TWVudUVtYWlsID0gaW5wdXQoIkVudHJleiB2b3RyZSBjaG9peCBbMS00XTogIikKICAgICAgICAgICAgICAgIG1hdGNoIGNob2l4TWVudUVtYWlsOgogICAgICAgICAgICAgICAgICAgIGNhc2UgIjEiOgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9yZWFkX2VtYWlsKCkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IGdsb3NvY2tldC5HTE9Tb2NrZXRFcnJvciBhcyBlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIkVycmV1ciwgbGEgY29ubmV4aW9uIGF2ZWMgbGUgc2VydmV1ciBlc3Qgcm9tcHVlIToiLCBlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fdXNlcm5hbWUgPSBOb25lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9xdWl0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZF9xdWl0ID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICBjYXNlICIyIjoKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2VuZF9lbWFpbCgpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBnbG9zb2NrZXQuR0xPU29ja2V0RXJyb3IgYXMgZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCJFcnJldXIsIGxhIGNvbm5leGlvbiBhdmVjIGxlIHNlcnZldXIgZXN0IHJvbXB1ZSE6IiwgZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3VzZXJuYW1lID0gTm9uZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcXVpdCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRfcXVpdCA9IFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgY2FzZSAiMyI6CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2NoZWNrX3N0YXRzKCkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IGdsb3NvY2tldC5HTE9Tb2NrZXRFcnJvciBhcyBlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIkVycmV1ciwgbGEgY29ubmV4aW9uIGF2ZWMgbGUgc2VydmV1ciBlc3Qgcm9tcHVlIToiLCBlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fdXNlcm5hbWUgPSBOb25lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9xdWl0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZF9xdWl0ID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICBjYXNlICI0IjoKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fbG9nb3V0KCkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IGdsb3NvY2tldC5HTE9Tb2NrZXRFcnJvciBhcyBlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIkVycmV1ciwgbGEgY29ubmV4aW9uIGF2ZWMgbGUgc2VydmV1ciBlc3Qgcm9tcHVlIToiLCBlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fdXNlcm5hbWUgPSBOb25lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9xdWl0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZF9xdWl0ID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICBjYXNlIF86CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCJDaG9peCBpbnZhbGlkZS4gVmV1aWxsZXogcsOpZXNzYXllci4iKQogICAgICAgICAgICAgICAgICAgICAgICBwYXNzCgoKZGVmIF9tYWluKCkgLT4gaW50OgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLWQiLCAiLS1kZXN0aW5hdGlvbiIsIGFjdGlvbj0ic3RvcmUiLAogICAgICAgICAgICAgICAgICAgICAgICBkZXN0PSJkZXN0IiwgcmVxdWlyZWQ9VHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgaGVscD0iQWRyZXNzZSBJUC9VUkwgZHUgc2VydmV1ci4iKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKHN5cy5hcmd2WzE6XSkKICAgIGNsaWVudCA9IENsaWVudChhcmdzLmRlc3QpCiAgICBjbGllbnQucnVuKCkKICAgIHJldHVybiAwCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIHN5cy5leGl0KF9tYWluKCkpCg==","server_file":""}},"tp_number":4}